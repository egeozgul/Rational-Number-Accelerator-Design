----------------------------------------------------------------------------------
-- Company: 
-- Engineer: Joshua Williams
-- 
-- Create Date: 04/21/2023 05:53:21 PM
-- Design Name: 
-- Module Name: BLFT_TB - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

use work.types.all;

entity BLFT_TB is
end BLFT_TB;

architecture Behavioral of BLFT_TB is
  constant WIDTH : integer := 256;
  
  type test_vals is 
    record 
      axis : AXIS;
      prime_neg : std_logic;
      swap : std_logic;
      operation : std_logic_vector(1 downto 0);
      
      A_in : std_logic_vector(WIDTH - 1 downto 0);
      B_in : std_logic_vector(WIDTH - 1 downto 0);
      C_in : std_logic_vector(WIDTH - 1 downto 0);
      D_in : std_logic_vector(WIDTH - 1 downto 0);
      E_in : std_logic_vector(WIDTH - 1 downto 0);
      F_in : std_logic_vector(WIDTH - 1 downto 0);
      G_in : std_logic_vector(WIDTH - 1 downto 0);
      H_in : std_logic_vector(WIDTH - 1 downto 0);
      
      A_out : std_logic_vector(WIDTH - 1 downto 0);
      B_out : std_logic_vector(WIDTH - 1 downto 0);
      C_out : std_logic_vector(WIDTH - 1 downto 0);
      D_out : std_logic_vector(WIDTH - 1 downto 0);
      E_out : std_logic_vector(WIDTH - 1 downto 0);
      F_out : std_logic_vector(WIDTH - 1 downto 0);
      G_out : std_logic_vector(WIDTH - 1 downto 0);
      H_out : std_logic_vector(WIDTH - 1 downto 0);
      
      internal_error : std_logic;
    end record;
    
  type test_vals_array is array (natural range <>) of test_vals;
  
  constant tests : test_vals_array := (
    (
      X, '1', '0', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed",
      
      '0'
    ),
    (
      X, '0', '1', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007", 256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 
      256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013", 256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 
      
      '0'
    ),
    (
      X, '0', '1', 2x"1",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000007", 256x"000000000000000000000000000000000000000000000000000000000000000a", 256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 
      256x"000000000000000000000000000000000000000000000000000000000000001c", 256x"0000000000000000000000000000000000000000000000000000000000000020", 256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 
      
      '0'
    ),
    (
      X, '0', '0', 2x"2",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000004", 256x"0000000000000000000000000000000000000000000000000000000000000006", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"0000000000000000000000000000000000000000000000000000000000000016", 256x"000000000000000000000000000000000000000000000000000000000000001a", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      '0'
    ),
    
    (
      Y, '1', '0', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed",
      
      '0'
    ),
    (
      Y, '0', '1', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000007", 256x"0000000000000000000000000000000000000000000000000000000000000005",
      256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"0000000000000000000000000000000000000000000000000000000000000013", 256x"0000000000000000000000000000000000000000000000000000000000000011",
      
      '0'
    ),
    (
      Y, '0', '1', 2x"1",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"000000000000000000000000000000000000000000000000000000000000000c", 256x"0000000000000000000000000000000000000000000000000000000000000005",
      256x"0000000000000000000000000000000000000000000000000000000000000018", 256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"0000000000000000000000000000000000000000000000000000000000000024", 256x"0000000000000000000000000000000000000000000000000000000000000011",
      
      '0'
    ),
    (
      Y, '0', '0', 2x"2",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000004", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"000000000000000000000000000000000000000000000000000000000000000a", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"0000000000000000000000000000000000000000000000000000000000000016", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000022", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      '0'
    ),
    
    (
      Z, '1', '0', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      '0'
    ),
    (
      Z, '0', '1', 2x"0",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      
      '0'
    ),
    (
      Z, '1', '1', 2x"1",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed",
      256x"0000000000000000000000000000000000000000000000000000000000000009", 256x"000000000000000000000000000000000000000000000000000000000000000a", 256x"000000000000000000000000000000000000000000000000000000000000000c", 256x"000000000000000000000000000000000000000000000000000000000000000c",
      
      '0'
    ),
    (
      Z, '0', '0', 2x"2",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"000000000000000000000000000000000000000000000000000000000000000b", 256x"000000000000000000000000000000000000000000000000000000000000000d", 256x"0000000000000000000000000000000000000000000000000000000000000011", 256x"0000000000000000000000000000000000000000000000000000000000000013",
      
      256x"0000000000000000000000000000000000000000000000000000000000000002", 256x"0000000000000000000000000000000000000000000000000000000000000003", 256x"0000000000000000000000000000000000000000000000000000000000000005", 256x"0000000000000000000000000000000000000000000000000000000000000007",
      256x"0000000000000000000000000000000000000000000000000000000000000016", 256x"000000000000000000000000000000000000000000000000000000000000001a", 256x"0000000000000000000000000000000000000000000000000000000000000022", 256x"0000000000000000000000000000000000000000000000000000000000000026",
      
      '0'
    ),
    
    
    (
      Z, '1', '1', 2x"1",
      
      256x"0000000000000000000000000000000000000000000000000000000000000200", 256x"0000000000000000000000000000000000000000000000000000000000003000", 256x"0000000000000000000000000000000000000000000000000000000000000050", 256x"0000000000000000000000000000000000000000000000000000000000007000",
      256x"00000000000000000000000000000000000000000000000000000000000b0000", 256x"00000000000000000000000000000000000000000000000000000000000000d0", 256x"0000000000000000000000000000000000000000000000000000000000001100", 256x"0000000000000000000000000000000000000000000000000000000000000130",
      
      256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5000", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef0", 256x"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed",
      256x"000000000000000000000000000000000000000000000000000000000000afe0", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0d", 256x"000000000000000000000000000000000000000000000000000000000000010b", 256x"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff913",
      
      '0'
    )
  );

  signal axis : AXIS;
  signal prime_neg : std_logic;
  signal swap : std_logic;
  signal operation : std_logic_vector(1 downto 0);
  
  signal A_in : std_logic_vector(WIDTH - 1 downto 0);
  signal B_in : std_logic_vector(WIDTH - 1 downto 0);
  signal C_in : std_logic_vector(WIDTH - 1 downto 0);
  signal D_in : std_logic_vector(WIDTH - 1 downto 0);
  signal E_in : std_logic_vector(WIDTH - 1 downto 0);
  signal F_in : std_logic_vector(WIDTH - 1 downto 0);
  signal G_in : std_logic_vector(WIDTH - 1 downto 0);
  signal H_in : std_logic_vector(WIDTH - 1 downto 0);
  
  signal pre_prime_0 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_prime_1 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_prime_2 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_prime_3 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_secondary_0 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_secondary_1 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_secondary_2 : std_logic_vector(WIDTH - 1 downto 0);
  signal pre_secondary_3 : std_logic_vector(WIDTH - 1 downto 0);
  
  signal post_prime_0 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_prime_1 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_prime_2 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_prime_3 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_secondary_0 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_secondary_1 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_secondary_2 : std_logic_vector(WIDTH - 1 downto 0);
  signal post_secondary_3 : std_logic_vector(WIDTH - 1 downto 0);
  
  signal A_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal B_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal C_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal D_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal E_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal F_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal G_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  signal H_unnormed : std_logic_vector(WIDTH - 1 downto 0);
  
  signal A_out : std_logic_vector(WIDTH - 1 downto 0);
  signal B_out : std_logic_vector(WIDTH - 1 downto 0);
  signal C_out : std_logic_vector(WIDTH - 1 downto 0);
  signal D_out : std_logic_vector(WIDTH - 1 downto 0);
  signal E_out : std_logic_vector(WIDTH - 1 downto 0);
  signal F_out : std_logic_vector(WIDTH - 1 downto 0);
  signal G_out : std_logic_vector(WIDTH - 1 downto 0);
  signal H_out : std_logic_vector(WIDTH - 1 downto 0);
  
  signal internal_error : std_logic;
begin
  PRE_ROUTER: entity work.PRE_ROUTER(Behavioral)
    generic map(
      REG_WIDTH => WIDTH
    )
    port map(
      axis => axis,
      
      A => A_in,
      B => B_in,
      C => C_in,
      D => D_in,
      E => E_in,
      F => F_in,
      G => G_in,
      H => H_in,
      
      prime_0 => pre_prime_0,
      prime_1 => pre_prime_1,
      prime_2 => pre_prime_2,
      prime_3 => pre_prime_3,
      secondary_0 => pre_secondary_0,
      secondary_1 => pre_secondary_1,
      secondary_2 => pre_secondary_2,
      secondary_3 => pre_secondary_3
    );
  
  ALU_LAYER: entity work.ALU_LAYER(Behavioral)
    generic map(
      REG_WIDTH => WIDTH
    )
    port map(
      prime_0_in => pre_prime_0,
      prime_1_in => pre_prime_1,
      prime_2_in => pre_prime_2,
      prime_3_in => pre_prime_3,
      
      secondary_0_in => pre_secondary_0,
      secondary_1_in => pre_secondary_1,
      secondary_2_in => pre_secondary_2,
      secondary_3_in => pre_secondary_3,
      
      prime_neg => prime_neg,
      swap => swap,
      operation => operation,
      
      prime_0_out => post_prime_0,
      prime_1_out => post_prime_1,
      prime_2_out => post_prime_2,
      prime_3_out => post_prime_3,
      
      secondary_0_out => post_secondary_0,
      secondary_1_out => post_secondary_1,
      secondary_2_out => post_secondary_2,
      secondary_3_out => post_secondary_3,
      
      internal_error => internal_error
    );
    
  POST_ROUTER: entity work.POST_ROUTER(Behavioral)
    generic map(
      REG_WIDTH => WIDTH
    )
    port map(
      axis => axis,
      
      prime_0 => post_prime_0,
      prime_1 => post_prime_1,
      prime_2 => post_prime_2,
      prime_3 => post_prime_3,
      
      secondary_0 => post_secondary_0, 
      secondary_1 => post_secondary_1, 
      secondary_2 => post_secondary_2, 
      secondary_3 => post_secondary_3, 
      
      A => A_unnormed,
      B => B_unnormed,
      C => C_unnormed,
      D => D_unnormed,
      E => E_unnormed,
      F => F_unnormed,
      G => G_unnormed,
      H => H_unnormed
    );
    
  NORMALIZER: entity work.NORMALIZER(Behavioral)
    generic map(
      REG_WIDTH => WIDTH
    )
    port map(
      A_in => A_unnormed,
      B_in => B_unnormed,
      C_in => C_unnormed,
      D_in => D_unnormed,
      E_in => E_unnormed,
      F_in => F_unnormed,
      G_in => G_unnormed,
      H_in => H_unnormed,

      A_out => A_out,
      B_out => B_out,
      C_out => C_out,
      D_out => D_out,
      E_out => E_out,
      F_out => F_out,
      G_out => G_out,
      H_out => H_out
    );
    
  process is
    constant period : time := 10 ns;
    variable vals : test_vals;
  begin
    for i in tests'range loop
      vals := tests(i);
      
      axis <= vals.axis;
      prime_neg <= vals.prime_neg;
      swap <= vals.swap;
      operation <= vals.operation;
      
      A_in <= vals.A_in;
      B_in <= vals.B_in;
      C_in <= vals.C_in;
      D_in <= vals.D_in;
      E_in <= vals.E_in;
      F_in <= vals.F_in;
      G_in <= vals.G_in;
      H_in <= vals.H_in;
      
      wait for period;
      
      assert A_out = vals.A_out
        report "Result A from test " & integer'image(i) & " was " & to_hstring(A_out) &
               ". Expected value " & to_hstring(vals.A_out)
        severity error;
               
      assert B_out = vals.B_out
        report "Result B from test " & integer'image(i) & " was " & to_hstring(B_out) &
               ". Expected value " & to_hstring(vals.B_out)
        severity error;
               
      assert C_out = vals.C_out
        report "Result C from test " & integer'image(i) & " was " & to_hstring(C_out) &
               ". Expected value " & to_hstring(vals.C_out)
        severity error;
               
      assert D_out = vals.D_out
        report "Result D from test " & integer'image(i) & " was " & to_hstring(D_out) &
               ". Expected value " & to_hstring(vals.D_out)
        severity error;
               
      assert E_out = vals.E_out
        report "Result E from test " & integer'image(i) & " was " & to_hstring(E_out) &
               ". Expected value " & to_hstring(vals.E_out)
        severity error;
               
      assert F_out = vals.F_out
        report "Result F from test " & integer'image(i) & " was " & to_hstring(F_out) &
               ". Expected value " & to_hstring(vals.F_out)
        severity error;
               
      assert G_out = vals.G_out
        report "Result G from test " & integer'image(i) & " was " & to_hstring(G_out) &
               ". Expected value " & to_hstring(vals.G_out)
        severity error;
               
      assert H_out = vals.H_out
        report "Result H from test " & integer'image(i) & " was " & to_hstring(H_out) &
               ". Expected value " & to_hstring(vals.H_out)
        severity error;
               
      assert internal_error = vals.internal_error
        report "Result error from test " & integer'image(i) & " was " & std_logic'image(internal_error) &
               ". Expected value " & std_logic'image(vals.internal_error)
        severity error;
    end loop;
    wait;
  end process;
end Behavioral;
